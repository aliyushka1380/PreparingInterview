"""
Задание 5*.Усовершенствовать программу «Банковский депозит».
Третьим аргументом в функцию должна передаваться фиксированная
ежемесячная сумма пополнения вклада. Необходимо в главной функции
реализовать вложенную функцию подсчета процентов для пополняемой суммы.
Примем, что клиент вносит средства в последний день каждого месяца,
кроме первого и последнего. Например, при сроке вклада в 6 месяцев
пополнение происходит в течение 4 месяцев. Вложенная функция возвращает
сумму дополнительно внесенных средств (с процентами),
а главная функция — общую сумму по вкладу на конец периода.

Примечание: используем функциональный подход (не ООП)
Пример: 10 тыс на 24 мес, пополнение - по 100
chargable_deposit(10000, 24, 100)
к концу срока: 13739.36
"""
deposits = [
	    {'begin_sum': 1000, 'end_sum': 9999, 6: 0.05, 12: 0.06, 24: 0.05},
	    {'begin_sum': 10000, 'end_sum': 99999, 6: 0.06, 12: 0.07, 24: 0.065},
	    {'begin_sum': 100000, 'end_sum': 999999, 6: 0.07, 12: 0.08, 24: 0.075}
	]

begin_sum = int(input('Введите сумму вклада от 1000 до 1000000: '))
period_deposit = int(input('Введите срок вклада в месяцах - 6/12/24: '))
addSum_deposit = int(input('Введите фиксированную ежемесячную сумму пополнения вклада: '))

"""1000–10000 руб (6 месяцев — 5 % годовых, год — 6 % годовых, 2 года — 5 % годовых).
10000–100000 руб (6 месяцев — 6 % годовых, год — 7 % годовых, 2 года – 6.5 % годовых).
100000–1000000 руб (6 месяцев — 7 % годовых, год — 8 % годовых, 2 года — 7.5 % годовых).
расчет без капитализации"""
def deposit_calc(amount, period, addSum):
    for terms in deposits:
        if amount < terms['end_sum']:
            end_sum = amount
            for i in range(period):
                if i == 0 or i == (period - 1):
                    end_sum += (end_sum * terms[period]) / 12
                else:
                    end_sum += (end_sum * terms[period]) / 12 + addSum + (addSum * terms[period]) / 12
            print(f'chargable_deposit({amount}, {int(period)}, {addSum}). К концу срока:', round(end_sum,2))
            break
deposit_calc(begin_sum, period_deposit, addSum_deposit)